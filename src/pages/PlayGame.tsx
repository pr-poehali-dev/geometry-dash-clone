
import { useEffect, useRef, useState } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import GameEngine from "@/components/game/GameEngine";
import LoadingScreen from "@/components/game/LoadingScreen";

const PlayGame = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [gameStarted, setGameStarted] = useState(false);
  const [musicPlaying, setMusicPlaying] = useState(false);
  const [currentProgress, setCurrentProgress] = useState(0);
  const [bestProgress, setBestProgress] = useState(30);
  const gameContainerRef = useRef<HTMLDivElement>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  
  // –†–µ–∂–∏–º—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–æ–ø—ã—Ç–æ–∫
  const [practiceMode, setPracticeMode] = useState(false);
  const [attempts, setAttempts] = useState(0);
  
  useEffect(() => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 3000);
    
    // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    if (gameStarted && !isLoading) {
      setAttempts(prev => prev + 1);
    }
    
    return () => {
      clearTimeout(timer);
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current = null;
      }
    };
  }, [isLoading, gameStarted]);

  const handleStartGame = () => {
    setGameStarted(true);
    setAttempts(prev => prev + 1);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ —É—Ä–æ–≤–Ω—è
    if (!musicPlaying) {
      audioRef.current = new Audio("/sounds/stereoMadness.mp3");
      audioRef.current.loop = true;
      audioRef.current.play().catch(e => console.log("Audio playback prevented:", e));
      setMusicPlaying(true);
    }
    
    // –§–æ–∫—É—Å –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    if (gameContainerRef.current) {
      gameContainerRef.current.focus();
    }
  };
  
  const togglePracticeMode = () => {
    setPracticeMode(!practiceMode);
  };
  
  const toggleMusic = () => {
    if (musicPlaying && audioRef.current) {
      audioRef.current.pause();
      setMusicPlaying(false);
    } else if (!musicPlaying) {
      audioRef.current = new Audio("/sounds/stereoMadness.mp3");
      audioRef.current.loop = true;
      audioRef.current.play().catch(e => console.log("Audio playback prevented:", e));
      setMusicPlaying(true);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑ GameEngine)
  useEffect(() => {
    if (gameStarted) {
      const interval = setInterval(() => {
        setCurrentProgress(prev => {
          const newProgress = prev + Math.random() * 0.5;
          if (newProgress > bestProgress) {
            setBestProgress(newProgress);
          }
          return newProgress < 100 ? newProgress : 100;
        });
      }, 500);
      
      return () => clearInterval(interval);
    }
  }, [gameStarted, bestProgress]);

  if (isLoading) {
    return <LoadingScreen />;
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-b from-indigo-900 to-black flex flex-col">
      <div className="p-4 flex justify-between items-center bg-black/50">
        <Link to="/">
          <Button variant="outline" className="text-white border-white/30">
            ‚Üê –ù–∞–∑–∞–¥
          </Button>
        </Link>
        <div className="flex flex-col items-center">
          <div className="text-white font-bold">Stereo Madness</div>
          <div className="text-xs text-yellow-400">Easy ‚≠ê</div>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            className={`text-white border-white/30 ${musicPlaying ? 'bg-green-700/50' : ''}`}
            onClick={toggleMusic}
          >
            {musicPlaying ? 'üîá' : 'üîä'}
          </Button>
          <Button 
            variant="outline" 
            className="text-white border-white/30"
            onClick={() => window.location.reload()}
          >
            ‚Üª
          </Button>
        </div>
      </div>
      
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
      <div className="px-4 py-2 bg-black/30">
        <div className="flex justify-between items-center text-xs text-white mb-1">
          <div className="flex items-center">
            <span className="mr-2">{practiceMode ? 'üîß –ü—Ä–∞–∫—Ç–∏–∫–∞' : 'üèÜ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º'}</span>
            <span>–ü–æ–ø—ã—Ç–∫–∞ #{attempts}</span>
          </div>
          <div>
            –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(currentProgress)}% (–õ—É—á—à–∏–π: {Math.round(bestProgress)}%)
          </div>
        </div>
        <Progress 
          value={currentProgress} 
          max={100} 
          className="h-2 bg-gray-800" 
          indicatorClassName="bg-gradient-to-r from-cyan-500 to-blue-500" 
        />
      </div>
      
      <div className="flex-1 flex flex-col items-center justify-center p-4 relative">
        {!gameStarted ? (
          <div className="text-center bg-black/50 p-8 rounded-2xl backdrop-blur-sm">
            <h2 className="text-3xl font-bold text-gradient bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-blue-500 mb-8">–ì–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å?</h2>
            
            <div className="flex flex-col gap-6">
              <Button 
                onClick={handleStartGame}
                className="bg-green-500 hover:bg-green-600 text-white text-xl py-6 px-12 rounded-xl animate-pulse shadow-lg shadow-green-500/30"
              >
                –ù–∞—á–∞—Ç—å!
              </Button>
              
              <Button 
                onClick={togglePracticeMode}
                variant="outline"
                className={`border-white/30 text-white ${practiceMode ? 'bg-blue-700/50' : ''}`}
              >
                {practiceMode ? '‚úì –†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏' : '‚ñ° –†–µ–∂–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∏'}
              </Button>
            </div>
            
            <div className="mt-8 grid grid-cols-3 gap-4">
              <div className="bg-black/30 p-3 rounded-lg">
                <div className="text-yellow-400 font-bold">12</div>
                <div className="text-xs text-white/70">–ú–æ–Ω–µ—Ç</div>
              </div>
              <div className="bg-black/30 p-3 rounded-lg">
                <div className="text-cyan-400 font-bold">37%</div>
                <div className="text-xs text-white/70">–†–µ–∫–æ—Ä–¥</div>
              </div>
              <div className="bg-black/30 p-3 rounded-lg">
                <div className="text-pink-400 font-bold">78</div>
                <div className="text-xs text-white/70">–ü–æ–ø—ã—Ç–æ–∫</div>
              </div>
            </div>
          </div>
        ) : (
          <div 
            ref={gameContainerRef}
            tabIndex={0} 
            className="w-full max-w-4xl h-[80vh] border-4 border-cyan-500 rounded-lg bg-black focus:outline-none overflow-hidden shadow-2xl shadow-cyan-500/30"
          >
            <GameEngine />
            
            {/* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
            <div className="absolute top-4 right-4 bg-black/50 px-3 py-2 rounded-lg backdrop-blur-sm text-white flex gap-2 items-center">
              <span className="text-yellow-400">üíé</span>
              <span>0/3</span>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ø—ã—Ç–∫–∏ */}
            <div className="absolute top-4 left-4 bg-black/50 px-3 py-2 rounded-lg backdrop-blur-sm text-white">
              –ü–æ–ø—ã—Ç–∫–∞ #{attempts}
            </div>
            
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
            <div className="absolute bottom-20 left-0 w-full flex justify-center pointer-events-none">
              <div className="bg-black/30 text-white px-4 py-2 rounded-full backdrop-blur-sm text-sm animate-pulse">
                –ù–∞–∂–º–∏—Ç–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –¥–ª—è –ø—Ä—ã–∂–∫–∞
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ */}
      {gameStarted && (
        <div className="p-4 bg-black/50 flex justify-center gap-4">
          <Button 
            variant="outline" 
            className="text-white border-white/30"
            onClick={() => setGameStarted(false)}
          >
            –ü–∞—É–∑–∞
          </Button>
          <Button 
            variant={practiceMode ? "default" : "outline"}
            className={practiceMode ? "bg-blue-600" : "text-white border-white/30"}
            onClick={togglePracticeMode}
          >
            {practiceMode ? "–í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É" : "–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É"}
          </Button>
        </div>
      )}
    </div>
  );
};

export default PlayGame;
